{"name":"Dbus","tagline":"Mirror Of git://anongit.freedesktop.org/git/dbus/dbus Root Of Much Evil See also Systemd","body":"Sections in this file describe:\r\n - introduction and overview\r\n - low-level vs. high-level API\r\n - version numbers\r\n - options to the configure script\r\n - ABI stability policy\r\n\r\nIntroduction\r\n===\r\n\r\nD-Bus is a simple system for interprocess communication and coordination.\r\n\r\nThe \"and coordination\" part is important; D-Bus provides a bus daemon that does things like:\r\n - notify applications when other apps exit\r\n - start services on demand\r\n - support single-instance applications\r\n\r\nSee http://www.freedesktop.org/software/dbus/ for lots of documentation, \r\nmailing lists, etc.\r\n\r\nSee also the file HACKING for notes of interest to developers working on D-Bus.\r\n\r\nIf you're considering D-Bus for use in a project, you should be aware\r\nthat D-Bus was designed for a couple of specific use cases, a \"system\r\nbus\" and a \"desktop session bus.\" These are documented in more detail\r\nin the D-Bus specification and FAQ available on the web site.\r\n\r\nIf your use-case isn't one of these, D-Bus may still be useful, but\r\nonly by accident; so you should evaluate carefully whether D-Bus makes\r\nsense for your project.\r\n\r\nNote: low-level API vs. high-level binding APIs\r\n===\r\n\r\nA core concept of the D-Bus implementation is that \"libdbus\" is\r\nintended to be a low-level API. Most programmers are intended to use\r\nthe bindings to GLib, Qt, Python, Mono, Java, or whatever. These\r\nbindings have varying levels of completeness and are maintained as\r\nseparate projects from the main D-Bus package. The main D-Bus package\r\ncontains the low-level libdbus, the bus daemon, and a few command-line\r\ntools such as dbus-launch.\r\n\r\nIf you use the low-level API directly, you're signing up for some\r\npain. Think of the low-level API as analogous to Xlib or GDI, and the\r\nhigh-level API as analogous to Qt/GTK+/HTML.\r\n\r\nVersion numbers\r\n===\r\n\r\nD-Bus uses the common \"Linux kernel\" versioning system, where\r\neven-numbered minor versions are stable and odd-numbered minor\r\nversions are development snapshots.\r\n\r\nSo for example, development snapshots: 1.1.1, 1.1.2, 1.1.3, 1.3.4\r\nStable versions: 1.0, 1.0.1, 1.0.2, 1.2.1, 1.2.3\r\n\r\nAll pre-1.0 versions were development snapshots.\r\n\r\nDevelopment snapshots make no ABI stability guarantees for new ABI\r\nintroduced since the last stable release. Development snapshots are\r\nlikely to have more bugs than stable releases, obviously.\r\n\r\nConfiguration \r\n===\r\n\r\ndbus could be build by using autotools or cmake. \r\n\r\nWhen using autotools the configure step is initiated by running ./configure \r\nwith or without additional configuration flags. \r\n\r\nWhen using cmake the configure step is initiated by running the cmake \r\nprogram with or without additional configuration flags. \r\n\r\nConfiguration flags\r\n===\r\n\r\nWhen using autotools, run \"./configure --help\" to see the possible\r\nconfiguration options and environment variables.\r\n\r\nWhen using cmake, inspect README.cmake to see the possible\r\nconfiguration options and environment variables.\r\n    \r\nAPI/ABI Policy\r\n===\r\n\r\nNow that D-Bus has reached version 1.0, the objective is that all\r\napplications dynamically linked to libdbus will continue working\r\nindefinitely with the most recent system and session bus daemons.\r\n\r\n - The protocol will never be broken again; any message bus should \r\n   work with any client forever. However, extensions are possible\r\n   where the protocol is extensible.\r\n\r\n - If the library API is modified incompatibly, we will rename it \r\n   as in http://ometer.com/parallel.html - in other words, \r\n   it will always be possible to compile against and use the older \r\n   API, and apps will always get the API they expect.\r\n\r\nInterfaces can and probably will be _added_. This means both new\r\nfunctions and types in libdbus, and new methods exported to\r\napplications by the bus daemon.\r\n\r\nThe above policy is intended to make D-Bus as API-stable as other\r\nwidely-used libraries (such as GTK+, Qt, Xlib, or your favorite\r\nexample). If you have questions or concerns they are very welcome on\r\nthe D-Bus mailing list.\r\n\r\nNOTE ABOUT DEVELOPMENT SNAPSHOTS AND VERSIONING\r\n\r\nOdd-numbered minor releases (1.1.x, 1.3.x, 2.1.x, etc. -\r\nmajor.minor.micro) are devel snapshots for testing, and any new ABI\r\nthey introduce relative to the last stable version is subject to\r\nchange during the development cycle.\r\n\r\nAny ABI found in a stable release, however, is frozen.\r\n\r\nABI will not be added in a stable series if we can help it. i.e. the\r\nABI of 1.2.0 and 1.2.5 you can expect to be the same, while the ABI of\r\n1.4.x may add more stuff not found in 1.2.x.\r\n\r\nNOTE ABOUT STATIC LINKING\r\n\r\nWe are not yet firmly freezing all runtime dependencies of the libdbus\r\nlibrary. For example, the library may read certain files as part of\r\nits implementation, and these files may move around between versions.\r\n\r\nAs a result, we don't yet recommend statically linking to\r\nlibdbus. Also, reimplementations of the protocol from scratch might\r\nhave to work to stay in sync with how libdbus behaves.\r\n\r\nTo lock things down and declare static linking and reimplementation to\r\nbe safe, we'd like to see all the internal dependencies of libdbus\r\n(for example, files read) well-documented in the specification, and\r\nwe'd like to have a high degree of confidence that these dependencies\r\nare supportable over the long term and extensible where required.\r\n\r\nNOTE ABOUT HIGH-LEVEL BINDINGS\r\n\r\nNote that the high-level bindings are _separate projects_ from the\r\nmain D-Bus package, and have their own release cycles, levels of\r\nmaturity, and ABI stability policies. Please consult the documentation\r\nfor your binding.\r\n\r\nBootstrapping D-Bus on new platforms\r\n===\r\n\r\nA full build of D-Bus, with all regression tests enabled and run, has some\r\ndependencies which themselves depend on D-Bus, either for compilation or\r\nfor some of *their* regression tests: GLib, dbus-glib and dbus-python are\r\ncurrently affected.\r\n\r\nTo avoid circular dependencies, when bootstrapping D-Bus for the first time\r\non a new OS or CPU architecture, you can either cross-compile some of\r\nthose components, or choose the build order and options carefully:\r\n\r\n* build and install D-Bus without tests\r\n  - do not use the --enable-modular-tests=yes configure option\r\n  - do not use the --enable-tests=yes configure option\r\n* build and install GLib, again without tests\r\n* use those versions of libdbus and GLib to build and install dbus-glib\r\n* ... and use those to install dbus-python\r\n* rebuild libdbus; this time you can run all of the tests\r\n* rebuild GLib; this time you can run all of the tests\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}